// samuellustosa/odontopro/odontopro-0fcabb6a8bff4855fe3e59920aa68cf7e65051fe/prisma/schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Appointment {
  id              String   @id @default(uuid())
  appointmentDate DateTime //data agendamento
  time            String

  clientId        String
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  serviceId       String
  service         Service  @relation(fields: [serviceId], references: [id])

  userId          String //ids das
  user            User     @relation(fields: [userId], references: [id])

  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
}

model Client {
  id          String        @id @default(uuid())
  name        String
  email       String
  phone       String
  appointments Appointment[]
  notes        ClientNote[]

  userId      String
  user        User          @relation(fields: [userId], references: [id])

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

 @@unique([email, userId], map: "Client_email_key")
}

model ClientNote {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Reminder {
  id          String   @id @default(uuid())
  description String


  userId      String
  user        User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


}

model Service {
  id          String        @id @default(uuid())
  name        String
  price       Int
  duration    Int
  status      Boolean       @default(true)

  userId      String
  user        User          @relation(fields: [userId], references: [id])

  appointment Appointment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


}

enum Plan {
  BASIC
  PROFESSIONAL
}

model Subscription {
  id        String   @id @default(uuid())
  status    String
  plan      Plan
  priceid   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

}


model ChatbotConfig {
  id          String   @id @default(uuid())
  name        String   @default("Assistente Virtual")
  personality String   @default("Gentil, amigavel, educado, profissional")
  enabled     Boolean  @default(true)

  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  address            String?         @default("")
  phone              String?         @default("")
  status             Boolean         @default(true)
  timezone           String?
  stripe_customer_id String?
  times              String[]        @default([])
  chatbotConfig      ChatbotConfig?
  subscription       Subscription?
  services           Service[]
  reminders          Reminder[]
  appointments       Appointment[]
  clients            Client[]
  clientNotes        ClientNote[]

  accounts           Account[]
  sessions           Session[]
  // Optional for WebAuthn support
  Authenticator      Authenticator[]

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}



model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}